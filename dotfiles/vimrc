" must be set first; prevents maintaining compatibility with Vi
set nocompatible



" SYSTEM ======================================================================

" keep these necessary files from being littered all over the machine
set undodir=~/.vim/undo//
set backupdir=~/.vim/backup//
set directory=~/.vim/swp//



" HELPER FUNCTIONS ============================================================

" toggle between light/dark backgrounds
function! ToggleBackground()
  if &background == "light"
    set background=dark
  else
    set background=light
  endif
endfunction

" source a file if it exists
function! SourceIfExists(filename)
  if filereadable(a:filename) | execute 'source ' . a:filename | endif
endfunction



" PLUGINS =====================================================================

" Using vim-plug. Tutorial here: https://github.com/junegunn/vim-plug/wiki/tutorial
" commands-> :PlugInstall, :PlugUpdate, :PlugClean

call plug#begin('~/.vim/plugged') " where plugins live

Plug 'junegunn/seoul256.vim'      " color scheme
Plug 'tpope/vim-fugitive'         " git integration
Plug 'scrooloose/nerdtree'
Plug 'mileszs/ack.vim'
Plug 'junegunn/fzf'
Plug 'vim-airline/vim-airline'    " informative vim status line
Plug 'tpope/vim-surround'
Plug 'majutsushi/tagbar'          " browse ctags
Plug 'scrooloose/syntastic'

" Add code completion?
"Plug 'tpope/vim-sensible'        " Consider adding this one someday
                                  "    to replace manual vim setup

call plug#end() " Plugins become visible to Vim after this call.
" get the latest vim-plug with :PlugUpgrade



" INPUT =======================================================================

" make Vim more compatible with other filesystems
au BufWritePre set nobomb     " don't set byte-order-mark on files
set encoding=utf-8            " all opened files should be UTF-8

" make Vim behave more like other editors
set backspace=indent,eol,start  " enable backspacing through whitespace
set virtualedit=all             " cursor can move past the end of the line
set mouse=a                     " enable mouse reporting/highlighting/scrolling

" use the system clipboard as the default register
set clipboard=unnamedplus,unnamed

" change the default tabs to two spaces
set expandtab     " use soft-tabs
set softtabstop=2 " default twp-space soft tabs
set shiftwidth=2  " auto-indent with 2 spaces



" NAVIGATION ==================================================================

" a leader key convenient in any keyboard layout
let mapleader=' '

" shortcuts for working with the quickview window
map <leader>cn :cnext<CR>     " next item in quickview
map <leader>cp :cprevious<CR> " previous item in quickview
map <leader>co :copen<CR>     " open quickview
map <leader>cl :cclose<CR>    " close quickview

" navigate split windows via ctrl-h/j/k/l
nnoremap <C-J> <C-W>j
nnoremap <C-K> <C-W>k
nnoremap <C-H> <C-W>h
nnoremap <C-L> <C-W>l



" VISUALS =====================================================================

syntax on        " enable syntax highlighting
set number       " show line number on left side
set ruler        " show column/line # on bottom-right
set nowrap       " don't wrap lines
set laststatus=2 " show statusline at the bottom
set showcmd      " show partial command input on bottom-right

" show invisible charactes
set list
set listchars=tab:⸘⸘,trail:⸘,extends:»,precedes:«

" modify cursor depending on mode
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

" shortcuts for common visual changes
map <leader>w :set wrap!<CR>               " toggle line wrapping
map <leader>r :set relativenumber!<CR>     " toggle relative/normal line numbers
map <leader>b :call ToggleBackground()<CR> " toggle between light/dark backgrounds

set guifont=Menlo:h18       " Set font to a reasonable size for GUI clients (eg Macvim)

" FILETYPES ===================================================================

au BufNewFile,BufRead *.go set filetype=go
au BufNewFile,BufRead *.json set filetype=javascript
au BufNewFile,BufRead *.md,*.markdown set filetype=markdown
au BufNewFile,BufRead *.gemspec,[gG]uardfile,[gG]emfile,[cC]apfile,[rR]akefile,*.ru set filetype=ruby
au BufNewFile,BufRead *.slim set filetype=slim
au BufNewFile,BufRead *.psql set filetype=sql
au BufNewFile,BufRead *.vundle,*.vundle.local set filetype=vim



" SEARCH ======================================================================

set hlsearch   " highlight search results
set incsearch  " enable incremental searching
set ignorecase " searches are case insensitive...
set smartcase  " unless they contain a capital letter

" center the screen on search results
nnoremap n  nzz
nnoremap N  Nzz
nnoremap *  *zz
nnoremap #  #zz
nnoremap g* g*zz
nnoremap g# g#zz



" CONFIGURE PLUGINS ===========================================================

" Color Scheme ===

colo seoul256

" ACK =============

" Search from current directory using <leader>a
let g:ackprg = 'ag --vimgrep --smart-case'
cnoreabbrev ag Ack!
cnoreabbrev Ack Ack!
nnoremap <leader>a :Ack!<Space>

" FZF =============

" Fuzzy-find files in current directory with <leader>f
nnoremap <leader>f :call fzf#run({ 'sink': 'e' })<CR>

" NERDTREE ========

map <leader>nt :NERDTreeToggle<CR> " open/close NERDtree
map <leader>nf :NERDTreeFind<CR>   " open at the current file

let g:NERDTreeWinSize=25   " constrain the default width
let g:NERDTreeShowHidden=1 " show hidden files

" don't display compiled or otherwise useless files
let g:NERDTreeIgnore = ['\.pyc$', '\.pyo$', '\.rbc$', '\.rbo$', '\.class$', '\.hi$', '\.o$', '\~$']

" TAGBAR ==========

" See bashrc for ctag generation. use tagpy or tags in command line.
set tags=tags

map <leader>t :TagbarToggle<CR>  "open/close Tagbar


" Python Debugger ==========

" insert python debugger line
map <leader>pdb oimport pdb; pdb.set_trace()<ESC>

" LOCAL OVERRIDE ==============================================================

" source a local override if it exists
call SourceIfExists($HOME . '/.vimrc.local')
