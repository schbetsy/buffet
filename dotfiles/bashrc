#!/usr/bin/env bash
#   ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
#   ┃                                   ┃
#   ┃   ____         __  __      _      ┃
#   ┃  | __ ) _   _ / _|/ _| ___| |_    ┃
#   ┃  |  _ \| | | | |_| |_ / _ \ __|   ┃
#   ┃  | |_) | |_| |  _|  _|  __/ |_    ┃
#   ┃  |____/ \__,_|_| |_|  \___|\__|   ┃
#   ┃                                   ┃
#   ┃        By Bendyworks - 2018       ┃
#   ┃                                   ┃
#   ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
#
# FUNCTIONS ===================================================================

source_if_exists() { if [ -f $1 ]; then . $1; eval $2; fi; }
prepend_to_path() { if [ -d $1 ]; then export PATH="$1:$PATH"; fi; }
append_to_path() { if [ -d $1 ]; then export PATH="$PATH:$1"; fi; }
resolve_and_prepend_to_path() { if [ -d $1 ]; then dir=$(cd $1; pwd); export PATH="$dir:$PATH"; fi; }
resolve_and_append_to_path() { if [ -d $1 ]; then dir=$(cd $1; pwd); export PATH="$PATH:$dir"; fi; }

# create a directory and immediately move to that directory
take() { mkdir -p $1; cd $1; }

# Heroku Helper:
# If the project folder is "FOO",
# And the production heroku app is named "FOO-production",
# then you can call:
#
#     prod heroku [cmd] [opts]
#
prod() {
  $* --app $(basename $(pwd))-production
}

brewyolo() {
  brew update && brew outdated && brew upgrade && brew postgresql-upgrade-database || brew cleanup && brew prune
}

npmnuke() {
  rm -rf node_modules && npm install
}

# Generate Ctags for this project that is in a virtualenv
#   call from project root with: `tagpy virtualenvName`
tagpy() {
  VIRTUALENV_NAME=$1
  if [ -z "$VIRTUALENV_NAME" ]
  then
    echo "Error: Include virtualenv name as argument."
    echo "if this isn't a python project, use the basicTags function."
  else
    LIB_LOCATION="$HOME/.virtualenvs/$VIRTUALENV_NAME/" #lib/"
    # borrowed from https://www.fusionbox.com/blog/detail/navigating-your-django-project-with-vim-and-ctags/590/
    PYTHON_LOCATION=$(python -c "import os, sys; print(' '.join('{}'.format(d) for d in sys.path if os.path.isdir(d)))")
    TAGS_COMMAND="ctags -R --fields=+l --languages=python --python-kinds=-iv ./ $LIB_LOCATION $PYTHON_LOCATION"
    echo $TAGS_COMMAND
    $TAGS_COMMAND
  fi
}

tags(){
  ctags -R
}

# TODO: Consider generating ctags automatically via git hooks
#   https://tbaggery.com/2011/08/08/effortless-ctags-with-git.html


# VARIABLES ===================================================================
# normalize the PATH stack
export PATH='/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin'

# Buffet bins
prepend_to_path "$HOME/.buffet/bin"

# Node Version Manager
if [ -d "$HOME/.nvm" ]; then
  export NVM_DIR="$HOME/.nvm"
  source_if_exists "$NVM_DIR/nvm.sh"
fi

# CFPB paths (from github.com/cfpb/dotfiles `.exports`)
export PATH="$HOME/homebrew/bin:$PATH:$HOME/homebrew/share/npm/bin"

# ENVIRONMENT VARIABLES =======================================================

# set the default editor to Vim
export EDITOR=vim
export VISUAL=vim

# ignore common large directories in grep
export GREP_OPTIONS='--exclude-dir=.svn --exclude-dir=.git --exclude-dir=tmp'

# set colors for LS; make directory names easier to read
export LSCOLORS=gxBxhxDxfxhxhxhxhxcxcx

# don't save duplicates in bash history
export HISTCONTROL=ignoredups:erasedups

# if docker-machine has started, export its variables
eval $(docker-machine env)

export FZF_DEFAULT_COMMAND='
  (git ls-files ||
   find . -path "*/\.*" -prune -o -type f -print -o -type l -print |
      sed s/^..//) 2> /dev/null'

# initialize PYENV
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

# initialize PyEnv VirtualenvWrapper
pyenv virtualenvwrapper

# CF.gov project settings =========

# activate autoenv on startup, for managing environment vars
# remove it, since I don't like it
# source "$HOME/homebrew/opt/autoenv/activate.sh"

# activate virtualenvwrapper on startup, so I can use `workon` to specify virtualenvs
source "$HOME/homebrew/bin/virtualenvwrapper.sh"


# HMDA ========

export EDITS_DEMO_MODE=true
export HMDA_IS_DEMO=true


# ALIASES =====================================================================

# upwards directory navigation
alias ..='cd ..' # ':' is reserved in bash as equivalent to true
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'
alias ::='cd ../..'
alias :::='cd ../../..'
alias ::::='cd ../../../..'
alias :::::='cd ../../../../..'

# shortcuts for the most commonly used tools
alias b='bundle'
alias be='bundle exec'
alias v='vim'
alias gr='grunt'
alias r='rake'

# override common tools with useful arguments
alias grep='grep --color'
alias la='ls -lah'
alias ls='ls -FG'
alias psack='ps aux | grep'

# Git aliases
alias g='git'
alias gap='git add -p'
alias gst='git status'

# run a server in the current directory
alias server='ruby -run -e httpd . -p 9090'

# attach to the tmux session or create a new session named after the user
alias tmuxup='tmux attach-session -t "$(whoami)" || tmux new-session -s "$(whoami)"'

alias path='echo $PATH | tr -s ":" "\n"'
alias read_env='export $(grep -v "^#" .env | xargs -0)'

# help for common sbt commands
alias sbclean='sbt clean compile test:compile'

# AUTO-COMPLETION =============================================================
source_if_exists "$BUFFET_DIRECTORY/bin/brew-auto-complete"
source_if_exists "$BUFFET_DIRECTORY/bin/npm-auto-complete"

# source any homebrew-supplied autocompletion files
comps_file='/usr/local/etc/bash_completion'

OS="`uname`"
case $OS in
  "Linux")
    ;;
  "Darwin")
    if [ -f `brew --prefix`/etc/bash_completion ]; then
      . `brew --prefix`/etc/bash_completion
    fi
    ;;
esac

# use git autocompletion when "git" is aliased to "g"
if type __git_complete &>/dev/null; then
  __git_complete g __git_main
fi

# Vault autocompletion
if hash vault 2>/dev/null; then
  complete -C /usr/local/bin/vault vault
fi

# OTHER SOURCED FILES =========================================================
source_if_exists "$HOME/.pair"            # "pair() shell function to set Git pairs"
source_if_exists "$HOME/.bashrc.local"    # local .bashrc overrides
source_if_exists "$HOME/.prompt"          # Bash prompt

# EOF =========================================================================
